{| class="wikitable sortable"
|+ Sortable table
|-
! scope="col" | name
! scope="col" | license
! scope="col" | created
! scope="col" | paradigm
! scope="col" | influenced-by
! scope="col" | typing
! scope="col" | GC
! scope="col" | tail call
|-
| [[C_(programming_language)|C]]
| license
| 1972
| imperative (procedural), structured
| [[B (programming language)|B]] ([[BCPL]], [[CPL (programming language)|CPL]]), [[ALGOL 68]],[[Assembly language|Assembly]], [[PL/I]], [[FORTRAN]]
| [[Type system|Static]], [[Weak typing|weak]], [[manifest typing|manifest]], [[Nominal type system|nominal]]
| no
| no
|-
| [[C%2B%2B|C++]]
| license
| 1983
| procedural, functional, object-oriented, generic
|
|
| [[Resource Acquisition Is Initialization|no]]
| maybe
|-
| [[Java_(programming_language)|Java]]
| [[GNU General Public License]], [[Java Community Process]]
| 1995
| object-oriented (class-based), structured, imperative, generic, reflective, concurrent
|
|
| yes
| no
|-
| [[Scala_(programming_language)|Scala]]
| license
| 2004
| functional, object-oriented, imperative, concurrent
|
|
| yes
| no
|-
| [[Clojure|Clojure]]
| [[Eclipse Public License]]
| 2007
| [[functional programming|functional]]
| [[Common Lisp]], [[Erlang (programming language)|Erlang]], [[Haskell (programming language)|Haskell]], [[ML (programming language)|ML]], [[Prolog]], [[Scheme (programming language)|Scheme]], [[Java (programming language)|Java]], [[Ruby (programming language)|Ruby]]
| [[dynamic typing|dynamic]], [[strong typing|strong]]
| yes
| [http://clojure.org/about/functional_programming#_recursive_looping no]
|-
| [[Kotlin (programming language)|Kotlin]]
| [[Apache license|Apache 2]]
| 2011
| [[Object-oriented_programming|oop]], [[Procedural_programming, procedural]]
| [[Java (programming language)|Java]], [[Scala (programming language)|Scala]], [[Groovy (programming language)|Groovy]], [[C Sharp (programming language)|C#]], [[Gosu (programming language)|Gosu]]
| [[Type system#Static type-checking|static]]
| yes
| [http://clojure.org/about/functional_programming#_recursive_looping no]
|-
| [[Ruby_(programming_language)|Ruby]]
| license
| 1995
| object-oriented, imperative, functional, reflective
|
|
| [http://www.rubyinside.com/how-ruby-manages-memory-and-garbage-collection-3006.html yes]
| no
|-
| [[JavaScript|Javascript]]
| license
| 1995
| scripting, object-oriented (prototype-based), imperative, functional
|
|
| [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management yes]
| no (maybe in ES6)
|-
| [[Python_(programming_language)|Python]]
| license
| 1991
| object-oriented, imperative, functional, procedural, reflective
|
|
| yes
| no
|-
| [[Go_(programming_language)|Go]]
| license
| 2009
| compiled, concurrent, imperative, structured
|
|
| yes
| [https://groups.google.com/forum/#!msg/golang-nuts/nOS2FEiIAaM/miAg83qEn-AJ no]
|-
| [[Rust_(programming_language)|Rust]]
| license
| 2010
| compiled, concurrent, functional, imperative, structured
|
|
| [https://doc.rust-lang.org/std/sync/struct.Arc.html no]
| [https://mail.mozilla.org/pipermail/rust-dev/2013-April/003557.html no]
|-
| [[Erlang_(programming_language)|Erlang]]
| license
| 1986
| concurrent, functional
|
|
| yes
| yes
|-
| [[Haskell_(programming_language)|Haskell]]
| license
| 1990
| functional, lazy/non-strict, modular
| [[Clean (programming language)|Clean]], [[FP (programming language)|FP]], [[Gofer (programming language)|Gofer]], [[Hope (programming language)|Hope]], [[Id (programming language)|Id]], [[ISWIM]], [[Kent Recursive Calculator|KRC]], [[Lisp (programming language)|Lisp]], [[Miranda (programming language)|Miranda]], [[ML (programming language)|ML]] and [[Standard ML]], [[Orwell (programming language)|Orwell]], [[SASL (programming language)|SASL]], [[Scheme (programming language)|Scheme]], [[SISAL]], [[Agda (theorem prover)|Agda]], [[Bluespec, Inc.|Bluespec]],{{sfn|Hudak|Hughes|Peyton Jones|Wadler|2007|p=12-38,43}} [[C++11]]/[[Concepts (C++)|Concepts]], [[C Sharp (programming language)|C#]]/[[Language Integrated Query|LINQ]], [[CAL (Quark Framework)|CAL]],{{Citation needed|date=February 2012}} [[Cayenne (programming language)|Cayenne]],{{sfn|Hudak|Hughes|Peyton Jones|Wadler|2007|pp=12-45–46}} [[Clean (programming language)|Clean]], [[Clojure]], [[CoffeeScript]], [[Curry (programming language)|Curry]], [[Elm (programming language)|Elm]], [[Epigram (programming language)|Epigram]], [[Escher (programming language)|Escher]], [[F Sharp (programming language)|F#]], [[Frege (programming language)|Frege]], [[Hack (programming language)|Hack]], [[Idris (programming language)|Idris]], [[Isabelle theorem prover|Isabelle]], [[Java (programming language)|Java]]/[[Generics in Java|Generics]], [[LiveScript]], [[Mercury (programming language)|Mercury]], [[Ωmega interpreter|Omega]], [[Perl 6]], [[Python (programming language)|Python]], [[Rust (programming language)|Rust]], [[Scala (programming language)|Scala]], [[Swift (Apple programming language)|Swift]], [[Timber (programming language)|Timber]], [[Visual Basic .NET|Visual Basic 9.0]]
| [[static typing|static]], [[strong typing|strong]], [[type inference|inferred]]
| [https://wiki.haskell.org/GHC/Memory_Management yes]
| [https://wiki.haskell.org/Tail_recursion yes]
|-
| [[Racket_(programming_language)|Racket]]
| [[GNU Lesser General Public License|LGPL]]
| 1994
| [[functional programming|functional]], [[procedural programming|procedural]], [[modular programming|modular]], [[object-oriented programming|object-oriented]], [[logic programming|logic]], [[reflection (computer science)|reflective]], [[metaprogramming|meta]]
| [[Scheme (programming language)|Scheme]], [[Eiffel (programming language)|Eiffel]]
| [[dynamic typing|Dynamic]], [[strong typing|strong]], [[static typing|static]]
| yes
| yes
|-
| [[Perl_6|Perl]]
| [[GNU General Public License]] or [[Artistic License]]
| 1987
| functional, imperative, object-oriented (class-based), reflective, procedural, event-driven, generic
|
| [[dynamic typing|dynamic]], [[static typing|static]], [[gradual typing|gradual]]
| yes
| no
|-
| [[Swift_(programming_language)|Swift]]
|
| 2014
| [[Multi-paradigm programming language|Multi-paradigm]] (Protocol-oriented programming, [[Object-oriented programming|object-oriented]], [[Functional programming|functional]], [[Imperative programming|imperative]], [[Block (programming)|block structured]])
| [[C Sharp (programming language)|C#]], [[CLU (programming language)|CLU]], [[D (programming language)|D]], [[Haskell (programming language)|Haskell]], [[Objective-C]], [[Python (programming language)|Python]], [[Rust (programming language)|Rust]], [[Ruby (programming language)|Ruby]]
| [[Type system#Static type-checking|Static]], [[strong typing|strong]], [[type inference|inferred]]
| [https://www.natashatherobot.com/functional-swift-tail-recursion/ no]
| [https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html no]
|-
| [[Objective-C|Objective-C]]
|
| 1983
| [[reflection (computer science)|Reflective]], [[class-based programming|class-based]] [[object-oriented programming|object-oriented]]
| [[C (programming language)|C]], [[Smalltalk]]
| [[Static typing|static]], [[Dynamic typing|dynamic]], [[Weak typing|weak]]
| no
| no
|-
| [[Pascal_(programming_language)|Pascal]]
| depends on vendor
| 1970
| {{hlist |[[Imperative programming|Imperative]] |[[Structured programming|Structured]]}}
|
| {{hlist |[[Static typing|Static]] |[[Strong and weak typing|Strong]] |[[type system#Safely and unsafely typed systems|Safe]]}}
| [http://stackoverflow.com/questions/5900583/garbage-collection-in-sml-java-c-pascal no]
| [http://stackoverflow.com/questions/27596248/why-languages-such-as-c-pascal-cannot-implement-tail-recursion no]
|-
| [[Wolfram_Language|Wolfram]]
| [[Proprietary license|Proprietary]]
| 1988
| functional languages
|
| term-rewriting, functional, procedural, array
| no maybe
| no maybe
|}
