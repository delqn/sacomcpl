## Computer Programming Languages

{| class="wikitable sortable"
|+ Sortable table
|-
! scope="col" | name
! scope="col" | license
! scope="col" | created
! scope="col" | paradigm
! scope="col" | influenced-by
! scope="col" | typing
! scope="col" | GC
! scope="col" | tail call
|-
| [[C_(programming_language)|C]]
| license
| 1972
| imperative (procedural), structured
|
|
| no
| no
|-
| [[C%2B%2B|C++]]
| license
| 1983
| procedural, functional, object-oriented, generic
|
|
| [[Resource Acquisition Is Initialization|no]]
| maybe
|-
| [[Java_(programming_language)|Java]]
| license
| 1995
| object-oriented (class-based), structured, imperative, generic, reflective, concurrent
|
|
| yes
| no
|-
| [[Scala_(programming_language)|Scala]]
| license
| 2004
| functional, object-oriented, imperative, concurrent
|
|
| yes
| no
|-
| [[Clojure|Clojure]]
| license
| 2007
| functional
|
|
| yes
| [http://clojure.org/about/functional_programming#_recursive_looping no]
|-
| [[Kotlin (programming language)|Kotlin]]
| [[Apache license|Apache 2]]
| 2011
| [[https://en.wikipedia.org/wiki/Object-oriented_programming|oop]], [[Procedural_programming, procedural]]
| [[Java (programming language)|Java]], [[Scala (programming language)|Scala]], [[Groovy (programming language)|Groovy]], [[C Sharp (programming language)|C#]], [[Gosu (programming language)|Gosu]]
| [[Type system#Static type-checking|static]]
| yes
| [http://clojure.org/about/functional_programming#_recursive_looping no]
|-
| [[Ruby_(programming_language)|Ruby]]
| license
| 1995
| object-oriented, imperative, functional, reflective
|
|
| [http://www.rubyinside.com/how-ruby-manages-memory-and-garbage-collection-3006.html yes]
| no
|-
| [[JavaScript|Javascript]]
| license
| 1995
| scripting, object-oriented (prototype-based), imperative, functional
|
|
| [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management yes]
| no (maybe in ES6)
|-
| [[Python_(programming_language)|Python]]
| license
| 1991
| object-oriented, imperative, functional, procedural, reflective
|
|
| yes
| no
|-
| [[Go_(programming_language)|Go]]
| license
| 2009
| compiled, concurrent, imperative, structured
|
|
| yes
| [https://groups.google.com/forum/#!msg/golang-nuts/nOS2FEiIAaM/miAg83qEn-AJ no]
|-
| [[Rust_(programming_language)|Rust]]
| license
| 2010
| compiled, concurrent, functional, imperative, structured
|
|
| [https://doc.rust-lang.org/std/sync/struct.Arc.html no]
| [https://mail.mozilla.org/pipermail/rust-dev/2013-April/003557.html no]
|-
| [[Erlang_(programming_language)|Erlang]]
| license
| 1986
| concurrent, functional
|
|
| yes
| yes
|-
| [[Haskell_(programming_language)|Haskell]]
| license
| 1990
| functional, lazy/non-strict, modular
|
|
| [https://wiki.haskell.org/GHC/Memory_Management yes]
| [https://wiki.haskell.org/Tail_recursion yes]
|-
| [[Racket_(programming_language)|Racket]]
| license
| 1994
| functional, procedural, modular, object-oriented, logic, reflective, meta
| Scheme, Eiffel
| Dynamic, strong, static
| yes
| yes
|-
| [[Perl_6|Perl]]
| 1987
| license
| functional, imperative, object-oriented (class-based), reflective, procedural, event-driven, generic
|
|
| yes
| no
|-
| [[Swift_(programming_language)|Swift]]
|
| 2014
| [[Multi-paradigm programming language|Multi-paradigm]] (Protocol-oriented programming, [[Object-oriented programming|object-oriented]], [[Functional programming|functional]], [[Imperative programming|imperative]], [[Block (programming)|block structured]])
| [[C Sharp (programming language)|C#]],<ref name="lattner2014">{{cite web|url=http://nondot.org/sabre/|title=Chris Lattner's Homepage|last=Lattner|first=Chris|date=2014-06-03|accessdate=2014-06-03|publisher=Chris Lattner|quote=The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.}}</ref> [[CLU (programming language)|CLU]],<ref name="lattner 2014 info 1">{{cite web|url=http://nondot.org/sabre|title=Chris Lattner's Homepage|publisher=Chris Lattner|first=Chris|last=Lattner|authorlink=Chris Lattner|date=June 3, 2014|accessdate=June 3, 2014|quote=I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from [[Objective-C]], Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.}}</ref> [[D (programming language)|D]],<ref name="swift blog">{{cite web|title=Building  assert()  in Swift, Part 2:  __FILE__  and  __LINE__  - Swift Blog -|url=https://developer.apple.com/swift/blog/?id=15|publisher=Apple Developer|accessdate=September 26, 2014 | quote=Swift borrows a clever feature from the [[D language]]: these identifiers expand to the location of the caller when evaluated in a default argument list.}}</ref> [[Haskell (programming language)|Haskell]], [[Objective-C]], [[Python (programming language)|Python]], [[Rust (programming language)|Rust]], [[Ruby (programming language)|Ruby]]
| [[Type system#Static type-checking|Static]], [[strong typing|strong]], [[type inference|inferred]]
| [https://www.natashatherobot.com/functional-swift-tail-recursion/ no]
| [https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html no]
|-
| [[Objective-C|Objective-C]]
|
| 1983
| [[reflection (computer science)|Reflective]], [[class-based programming|class-based]] [[object-oriented programming|object-oriented]]
| [[C (programming language)|C]], [[Smalltalk]]
| [[Static typing|static]], [[Dynamic typing|dynamic]], [[Weak typing|weak]]
| no
| no
|-
| [[Pascal_(programming_language)|Pascal]]
| depends on vendor
| 1970
| {{hlist |[[Imperative programming|Imperative]] |[[Structured programming|Structured]]}}
|
| {{hlist |[[Static typing|Static]] |[[Strong and weak typing|Strong]] |[[type system#Safely and unsafely typed systems|Safe]]}}
| [http://stackoverflow.com/questions/5900583/garbage-collection-in-sml-java-c-pascal no]
| [http://stackoverflow.com/questions/27596248/why-languages-such-as-c-pascal-cannot-implement-tail-recursion no]
|-
| [[Wolfram_Language|Wolfram]]
| [[Proprietary license|Proprietary]]
| 1988
| [[Julia (programming language)|Julia]]
| term-rewriting, functional, procedural, array
| no maybe
| no maybe
|}
